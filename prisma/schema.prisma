// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  first_name      String     @db.String
  last_name       String     @db.String
  email           String     @db.String
  profile_picture String     @db.String
  access_token    String     @db.String
  refresh_token   String     @db.String
  creator         Creator[]
  consumer        Consumer[]
}

model Creator {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  bio          String    @db.String
  profession   String?    @db.String
  social_links String[]  @db.String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  price        Float     @db.Double
  userid       String    @db.String
  user         User      @relation(fields: [userid], references: [id])
  videos       Video[]
  payments     Payment[]
  video_requests VideoRequest[]
  ratings   Rating[]
}




model Consumer {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  username   String    @db.String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  userid     String    @db.String
  user       User      @relation(fields: [userid], references: [id])
  videos     Video[]
  video_requests VideoRequest[]
  payments   Payment[]
  ratings   Rating[]
}

model Rating{
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  rating  Float  @db.Double
  creator_id String @db.String
  consumer_id  String @db.String @default("Anonymous")
  comment String @db.String
  rated_by Consumer @relation(fields: [consumer_id], references: [id])
  rated_for Creator @relation(fields: [creator_id], references: [id])
  created_at DateTime @default(now())
}

model Video {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String   @db.String
  description   String   @db.String
  video_url     String   @db.String
  thumbnail_url String   @db.String
  creator_id    String   @db.String
  consumer_id   String   @db.String
  uplodaded_by  Creator  @relation(fields: [creator_id], references: [id])
  uploaded_for  Consumer @relation(fields: [consumer_id], references: [id])
  uploaded_at   DateTime @default(now())
  created_at    DateTime @default(now())
}


model VideoRequest{
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String   @db.String
  description   String   @db.String
  creator_id    String   @db.String
  consumer_id   String   @db.String
  requested_by  Consumer  @relation(fields: [consumer_id], references: [id])
  requested_for  Creator @relation(fields: [creator_id], references: [id])
  requested_at   DateTime @default(now())
  created_at    DateTime @default(now())

}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  message     String   @db.String
  sender_id   String   @db.String
  receiver_id String   @db.String
  sent_at     DateTime @default(now())
}

model Payment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  tx_ref      String   @db.String
  amount      Float    @db.Double
  currency    String   @db.String
  creator_id  String   @db.String
  consumer_id String   @db.String
  payment_for Creator  @relation(fields: [consumer_id], references: [id])
  payment_by  Consumer @relation(fields: [consumer_id], references: [id])
  payment_at  DateTime @default(now())
}


